/*
 * Code generated by MIMOS tool.
 * Date: 2024/03/12 16:35:17
 * 
 * Choose particles from the initial particles and resampled particles.
 * 
 * Inputs: 
 * - Randomly initial particles. A list of NUMPARTICLES*4 doubles, (x, y, theta, weight).
 * - Resampled particles. A list of NUMPARTICLES*4 doubles, (x, y, theta, weight).
 * Outputs:
 * - A list of NUMPARTICLES*4 doubles, (x, y, theta, weight).
 */

import java.util.Random;
import java.io.File;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.ArrayList;
import java.util.*;

public class Input_Selector {
    /* Inputs: */
    double[] input1; // Resampled particles
    double[] input2; // Initial particles

    /* Outputs: */
    double[] output1;

    static String outFilePath = "D:\\lxx\\thesis\\cases\\lxx\\pfl0312\\data\\outputs\\particles_selector.txt";
    static String outFilePath1 = "D:\\lxx\\thesis\\cases\\lxx\\pfl0312\\data\\outputs\\input1_selector.txt";
    static String outFilePath2 = "D:\\lxx\\thesis\\cases\\lxx\\pfl0312\\data\\outputs\\input2_selector.txt";
    static boolean selectResampled = false;

    /* Node computation: */
    public boolean run() {
        if (input1 != null && input1.length != 0 && selectResampled) {
            output1 = input1;
            System.out.println("Input_Selector output: Resampled particles");

            for (double value : input1) {
                //System.out.print(value);
            }



        } else if (input2 != null && input2.length != 0 && !selectResampled) {
            output1 = input2;
            System.out.println("Input_Selector output: Initial particles");
            selectResampled = true;
        } else {
            output1 = null;
            System.out.println("Input_Selector output: No output");
        }

        //Save the initial particles to a txt file for visualization
        if (output1 != null) {
            File file = new File(outFilePath);
            try (PrintWriter pw = new PrintWriter(file)) {
                for (double value : output1) {
                    pw.println(value);
                }
                // System.out.println("Output for Resampled Particles is
                // Completed!\n========================\n");
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        if (input1 != null) {
            File file = new File(outFilePath1);
            try (PrintWriter pw = new PrintWriter(file)) {
                for (double value : input1) {
                    pw.println(value);
                }
                // System.out.println("Output for Resampled Particles is
                // Completed!\n========================\n");
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        if (input2 != null) {
            File file = new File(outFilePath2);
            try (PrintWriter pw = new PrintWriter(file)) {
                for (double value : input2) {
                    pw.println(value);
                }
                // System.out.println("Output for Resampled Particles is
                // Completed!\n========================\n");
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        return true;
    }

    /* Setters (for inputs): */
    public void set_input1(double[] i) {
        input1 = i;
    }

    public void set_input2(double[] i) {
        input2 = i;
    }

    /* Getters (for outputs): */
    public double[] get_output1() {
        return output1;
    }
}
