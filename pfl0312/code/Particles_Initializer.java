/*
 * Code generated by MIMOS tool.
 * Date: 2024/03/12 14:19:42
 * 
 * Randomly generate particles within free space. A particle has four attributes, 
 * position (x, y), orientation (theta), and weight.
 * 
 * 
 * Outputs: 
 * - A list of NUMPARTICLES*4 doubles, (x, y, theta, weight). The weight of every particle is set equally (= 1.0 / NUMPARTICLES).
 * - A txt file named "particles_initial.txt" that contains the generated initial particles.
 * This file is used for visualization. Another file will use it to add these particles on the map graph.
 * 
 */

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class Particles_Initializer {
    // private final static Logger logger =
    // LoggerFactory.getLogger(Particles_Initializer.class);
    /* Inputs: */

    /* Outputs: */
    double[] output1; // A list of NUMPARTICLES*4 doubles, (x, y, theta, weight)

    static int NUMPARTICLES = 500;
    static String filePath = "D:\\lxx\\thesis\\cases\\lxx\\pfl0312\\data\\maps\\wean.dat";
    static String outFilePath = "D:\\lxx\\thesis\\cases\\lxx\\pfl0312\\data\\outputs\\particles_initial.txt";

    EnvMap occGrid;
    List<Integer> freeXs;
    List<Integer> freeYs;
    int numFreeLocs;

    static double[] particles_0;

    int bootTime = 1;

    Random rand = new Random();

    public Particles_Initializer() {
        occGrid = new EnvMap(filePath); // Load the map
        freeXs = occGrid.getFreeXs();
        freeYs = occGrid.getFreeYs();
        numFreeLocs = freeXs.size();
    }

    /* Node computation: */
    public boolean run() {
        if (bootTime == 1) {
            // output1 = new double[4 * NUMPARTICLES];
            particles_0 = new double[4 * NUMPARTICLES];
            for (int i = 0; i < NUMPARTICLES; i++) {
                int idx = rand.nextInt(numFreeLocs); // Randomly select a free location
                // output1[4 * i] = freeXs.get(idx) * occGrid.getResolution();
                // output1[4 * i + 1] = freeYs.get(idx) * occGrid.getResolution();
                // output1[4 * i + 2] = (rand.nextDouble() * 2 - 1) * Math.PI; // Randomly
                // generate the orientation, [-PI,
                // // PI]
                // output1[4 * i + 3] = 1.0 / NUMPARTICLES;

                particles_0[4 * i] = freeXs.get(idx) * occGrid.getResolution();
                particles_0[4 * i + 1] = freeYs.get(idx) * occGrid.getResolution();
                particles_0[4 * i + 2] = (rand.nextDouble() * 2 - 1) * Math.PI; // Randomly generate the orientation,
                                                                                // [-PI,
                // PI]
                particles_0[4 * i + 3] = 1.0 / NUMPARTICLES;

                output1 = particles_0;
            }
            bootTime = 0;

            // Save the initial particles to a txt file for visualization
            File file = new File(outFilePath);
            try (PrintWriter pw = new PrintWriter(file)) {
                for (double value : output1) {
                    pw.println(value);
                }
                System.out.println("\nOutput for Initial Particles is Completed!\n");
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            output1 = particles_0;
        }

        return true;
    }

    /* Setters (for inputs): */

    /* Getters (for outputs): */
    public double[] get_output1() {
        return output1;
    }

    /* Create a map class: EnvMap */
    private class EnvMap {
        private int sizeX;
        private int sizeY;
        private int resolution;
        private double[][] map;
        private List<Integer> freeXs = new ArrayList<>();
        private List<Integer> freeYs = new ArrayList<>();

                public EnvMap(String fileName) {
            String line = "";  
            String splitBy = " ";  
            try{  
                //parsing a CSV file into BufferedReader class constructor  
                BufferedReader br = new BufferedReader(new FileReader(fileName)); 
                line = br.readLine();
                String[] dataVal = line.split(splitBy);
                this.sizeX = Integer.valueOf(dataVal[1]);
                line = br.readLine();
                dataVal = line.split(splitBy);
                this.sizeY = Integer.valueOf(dataVal[1]);
                line = br.readLine();
                dataVal = line.split(splitBy);
                this.resolution = Integer.valueOf(dataVal[1]);

                this.sizeX /= resolution;
                this.sizeY /= resolution;

                this.map = new double[this.sizeX][];
                for(int i = 0; i < this.sizeX; i++){
                    this.map[i] = new double[this.sizeY];
                }

                for(int i = 0; i < this.sizeX; i++){
                    line = br.readLine();
                    dataVal = line.split(splitBy);
                    int j = 0;
                    for(String dataItem: dataVal){
                        Double dataInt = Double.valueOf(dataItem);
                        this.map[i][j] = dataInt;
                        if(dataInt == 0){
                            //if(dataInt == 1){
                            this.freeXs.add(i);
                            this.freeYs.add(j);
                        }
                        j++;
                    }
                }
            }catch (IOException e){  
                e.printStackTrace();  
            }  
        }
        // public EnvMap(String fileName) {
        //     try (BufferedReader mapFile = new BufferedReader(new FileReader(fileName))) {
        //         String strToken;
        //         int intToken;

        //         // Reading map size and resolution
        //         strToken = mapFile.readLine();
        //         intToken = Integer.parseInt(strToken.split(" ")[1]);
        //         this.sizeX = intToken;

        //         strToken = mapFile.readLine();
        //         intToken = Integer.parseInt(strToken.split(" ")[1]);
        //         this.sizeY = intToken;

        //         strToken = mapFile.readLine();
        //         intToken = Integer.parseInt(strToken.split(" ")[1]);
        //         this.resolution = intToken;

        //         this.sizeX /= resolution;
        //         this.sizeY /= resolution;

        //         this.map = new double[this.sizeX][this.sizeY];

        //         for (int i = 0; i < this.sizeX; i++) {
        //             strToken = mapFile.readLine();
        //             List<String> rowValues = Arrays.asList(strToken.split(" "));
        //             for (int j = 0; j < this.sizeY; j++) {
        //                 double e = Double.parseDouble(rowValues.get(j));
        //                 this.map[i][j] = e;
        //                 if (e == 0) {
        //                     this.freeXs.add(i);
        //                     this.freeYs.add(j);
        //                 }
        //             }
        //         }
        //     } catch (IOException e) {
        //         e.printStackTrace();
        //     }
        // }

        public int getX() {
            return this.sizeX;
        }

        public int getY() {
            return this.sizeY;
        }

        public double getResolution() {
            return this.resolution;
        }

        public boolean isValid(int x, int y) {
            return x >= 0 && x < this.sizeX && y >= 0 && y < this.sizeY;
        }

        public boolean isFree(int x, int y) {
            return this.map[x][y] == 0;
        }

        public double getProb(int x, int y) {
            return this.map[x][y];
        }

        // logger.info(mapString);
        public void printMap() {
            for (int i = 0; i < this.sizeX; i++) {
                for (int j = 0; j < this.sizeY; j++) {
                    System.out.printf("%.3f ", this.map[i][j]);
                }
                System.out.println();
            }
        }

        public double[][] getMap() {
            return this.map;
        }

        public List<Integer> getFreeXs() {
            return this.freeXs;
        }

        public List<Integer> getFreeYs() {
            return this.freeYs;
        }
    }
}
