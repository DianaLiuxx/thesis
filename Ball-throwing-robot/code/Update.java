/*
 * Code generated by MIMOS tool.
 * Date: 2024/07/02 17:49:10
 * 
 * Update the policy (mean)
 */

import java.util.Random;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.ArrayList;
import java.util.*;

import java.io.IOException;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.PrintWriter;

public class Update {
    ArrayList<ArrayList<Double>> policiesLog = new ArrayList<>();
    String outfilePath = "D:\\lxx\\thesis\\cases\\lxx\\Ball-throwing-robot\\data\\outputs\\policy.txt";
    ArrayList<Double> policyMu = new ArrayList<>();

    /* Inputs: */
    double[] input3; // All the samples for one iteration, size = numSamples * parameters, eg. 60 = 15 * 4
    int[] input2; // The index list of chosen samples, size = topN, eg. 5
    double[] input1; // The current mean and variance, size = 2 * parameters,
                     // eg. [p1_mean, p2_mean, p3_mean, p4_mean, p1_var, p2_var, p3_var, p4_var]

    /* Outputs: */
    double[] output1; // The updated mean and variance, size = 2 * parameters

    /* Node computation: */
    public boolean run() {
        policyMu.clear();
        
        output1 = new double[8];

        for (int i = 0; i < 4; i++) {
            double sum = input1[i];
            for (int idx : input2) {
                sum += input3[4 * idx + i];
            }
            double mean = sum / (input2.length + 1);

            double var = Math.pow(input1[i] - mean, 2);
            for (int idx : input2) {
                var += Math.pow(input3[4 * idx + i] - mean, 2);
            }
            var /= (input2.length + 1);

            output1[i] = mean;
            output1[i + 4] = var;
        }

        for (int i = 0; i < 4; i++) {
            policyMu.add(input1[i]);
        }

        policiesLog.add(new ArrayList<>(policyMu));
        //System.out.println("Policy updated: " + policyMu);
        //System.out.println("policiesLog: " + policiesLog);

        
        // Write policy to file
        try (BufferedWriter outLogFile = new BufferedWriter(new FileWriter(outfilePath))) {
            for (ArrayList<Double> policy : policiesLog) {
                for (Double param : policy) {
                    outLogFile.write(param + " ");
                }
                outLogFile.newLine();
            }
        } catch (IOException e) {
            System.err.println("Error writing to log file: " + e.getMessage());
        }

        return true;
    }

    /* Setters (for inputs): */
    public void set_input3(double[] i) {
        input3 = i;
    }

    public void set_input2(int[] i) {
        input2 = i;
    }

    public void set_input1(double[] i) {
        input1 = i;
    }

    /* Getters (for outputs): */
    public double[] get_output1() {
        return output1;
    }
}