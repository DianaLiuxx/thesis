/*
 * Code generated by MIMOS tool.
 * Date: 2024/05/12 19:09:54
 */

import java.util.Random;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.ArrayList;
import java.util.*;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.FileWriter;

public class Controller {

    String outfilePath = "D:\\lxx\\thesis\\cases\\lxx\\dmp\\data\\outputs\\trajectory.txt";
    /* Inputs: */
    double[] input2;
    double input1;

    /* Outputs: */
    double output2;
    double output3;
    double output1;

    /* Settings: */
    int t = 0;
    double dt = 1;

    double q0 = 0.0; // Initial
    double g = 1.0; // Goal
    double T = 1500.0; // Trajectory time

    // double q = q0;
    double qd = 0.0;
    double qdd;

    //int nrBasis = input2.length;
    int nrBasis = 15;
    double K = 25.0 * 25 / 4; // Virtual spring coefficient
    double B = 25.0; // Virtual damper coefficient
    double[] C = new double[nrBasis]; // Basis function centers
    // Basis function widths
    double H = 0.65 * (1.0 / (nrBasis - 1.0)) * (1.0 / (nrBasis - 1.0));

    /* Node computation: */
    public boolean run() {

        double q = input1;
        t += dt;

        // Basis function centers
        for (int i = 0; i < nrBasis; i++) {
            C[i] = (double) i / (nrBasis - 1);
        }

        // Compute the basis function values and force term
        double sum = 0;
        double[] Phi = new double[nrBasis];

        for (int i = 0; i < nrBasis; i++) {
            double p = Math.exp(-0.5 * ((t / T - C[i]) * (t / T - C[i]) / H));
            Phi[i] = p;

            sum += p;
        }

        for (int i = 0; i < nrBasis; i++) {
            Phi[i] /= sum;
        }

        double f = 0;
        for (int i = 0; i < nrBasis; i++) {
            f += Phi[i] * input2[i];
        }

        qdd = K * (g - q) / (T * T) - B * qd / T + (g - q0) * f / (T * T);
        qd += qdd * dt;
        q += qd * dt;

        output1 = q;
        output2 = qd * 1000; // Change the unit to m/s
        output3 = qdd * 1000 * 1000;
        //System.out.println("q: " + q + " qd: " + qd*1000 + " qdd: " + qdd*1000*1000);
        double qdfout = qd * 1000;
        double qddfout = qdd * 1000 * 1000;


        try (BufferedWriter pathFile = new BufferedWriter(new FileWriter(outfilePath, true))) {
            pathFile.write(String.format("%f %f %f %f", (double)t, q, qdfout, qddfout));
            pathFile.newLine();
        } catch (IOException e) {
            System.out.println("An error occurred while writing to the file: " + e.getMessage());
        }

        return true;
    }

    /* Setters (for inputs): */
    public void set_input2(double[] i) {
        input2 = i;
    }

    public void set_input1(double i) {
        input1 = i;
    }

    /* Getters (for outputs): */
    public double get_output2() {
        return output2;
    }

    public double get_output3() {
        return output3;
    }

    public double get_output1() {
        return output1;
    }
}
