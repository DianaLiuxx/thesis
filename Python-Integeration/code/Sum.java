/*
 * Code generated by MIMOS tool.
 * Date: 2024/04/12 12:14:10
 */

import java.util.Random;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.ArrayList;
import java.util.*;
import java.io.*;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

public class Sum {
    // private final static Logger logger = LoggerFactory.getLogger(Sum.class);
    /* Inputs: */
    double input2;
    double input1;

    /* Outputs: */
    double output1;

    private String resolvePythonScriptPath(String path) {
        File file = new File(path);
        String absolutePath = file.getAbsolutePath();
        return absolutePath;
    }

    private String runPython() throws IOException, InterruptedException {
        String fileAddress = "D:\\lxx\\thesis\\Python-Integeration\\code\\sum.py";
        // Make sure that the command, "python", is available in the system's PATH environment variable.
        ProcessBuilder processBuilder = new ProcessBuilder("python",
                resolvePythonScriptPath(fileAddress), String.valueOf(input1), String.valueOf(input2));
        // System.out.println("\nabsolute path: " + resolvePythonScriptPath(fileAddress));
        // System.out.println("input1: " + input1);
        // System.out.println("input2: " + input2);

        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();
        List<String> results = readProcessOutput(process.getInputStream());
        int exitCode = process.waitFor();

        // results.forEach(System.out::println);
        // System.out.println("Process exited with code: " + process.exitValue());

        if (results.isEmpty()) {
            throw new IllegalStateException("Results list is empty.");
        }
        return results.get(0);
    }

    private List<String> readProcessOutput(InputStream inputStream) throws IOException {
        List<String> res = new ArrayList<>();
        BufferedReader is = new BufferedReader(new InputStreamReader(inputStream));

        String line;
        while ((line = is.readLine()) != null) {
            System.out.println(line);
            res.add(line);
        }
        return res;
    }

    /* Node computation: */
    public boolean run() {
        // TODO: put your code here
        try {
            String res = runPython();
            output1 = Double.valueOf(res);
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        return true;
    }

    /* Setters (for inputs): */
    public void set_input2(double i) {
        input2 = i;
    }

    public void set_input1(double i) {
        input1 = i;
    }

    /* Getters (for outputs): */
    public double get_output1() {
        return output1;
    }
}
